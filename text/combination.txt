	lw	0	1	n	$1=memmory[n]
	lw	0	2	r	$2=memmory[r]
	lw	0	6	combi	prepare to call nCr. $6=nCr
	jalr	6	7		call nCr; $7=return address; $3=answer
	halt
nCr	beq	1	2	return1	if $1=$2 goto return1
	beq	2	0	return1	if $2=0 goto return1
	lw	0	6	pos1	$6=1
	add	5	6	5	add stack+1
	sw	5	7	stack	store return address
	add	5	6	5	add stack+1
	sw	5	1	stack	store n
	add	5	6	5	add stack+1
	sw	5	2	stack	store r
	add	5	6	5	add stack+1
	lw	0	6	neg1	$6=-1
	add	1	6	1	n=n-1
	lw	0	6	combi	prepare to call nCr. $6=nCr
	jalr	6	7		call combi(n-1,r); $7=return address; $3=answer
	sw	5	3	stack	store $3=combin(n-1,r)
	lw	0	6	neg1	$6=-1
	add	2	6	2	r=r-1
	lw	0	6	combi	prepare to call nCr. $6=nCr
	jalr	6	7		call combi(n-1,r-1); $7=return address; $3=answer
	lw	5	4	stack	load combin(n-1,r)=$4
	add	4	3	3	add new value and old value
	lw	0	6	neg1	$6=-1
	add	5	6	5	sub stack-1
	lw	5	2	stack	load r
	add	5	6	5	sub stack-1
	lw	5	1	stack	load n
	add	5	6	5	sub stack-1
	lw	5	7	stack	load return address
	add	5	6	5	sub stack-1
	jalr	7	6		return.
return1	lw	0	3	pos1	$3=1
	jalr	7	6		return.
pos1	.fill	1
neg1	.fill	-1
n	.fill	7
r	.fill	3
combi	.fill	nCr
check	.fill	check1
stack	.fill	0